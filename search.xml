<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Redis]]></title>
    <url>%2F2017%2F07%2F19%2FRedis%2F</url>
    <content type="text"><![CDATA[Linux环境安装Redis准备工作Linux环境 我安装的是：RHEL7 ，安装在虚拟机上 redis-3.2.9:64位 linux远程连接工具：a : SecureCRT 8.1 b : WinSCP 在Linux上安装Redis用WinSCP工具把下载好的Redis-3.2.9上传到Linux虚拟机上 用SecureCRT 8.1工具连接上Linux虚拟机 找到Redis-3.2.9 执行解压命令 1$ tar zxvf Redis-3.2.9.gz 进入解压后的目录，然后对Redis解压后的文件进行编译，编译完成之后进入src目录进行Redis安装 1234567$ cd Redis-3.2.9 //进入解压目录$ make //编译Redis$ make install //安装Redis出现该提示表示安装成功：Hint:It's a good idea to run 'make test' ;) INSTALL install INSTALL install INSTALL install Redis的设置为了方便管理,将Redis文件中的conf配置文件和常用命令移动到统一的文件中 在/usr/local/目录下创建新目录：/redis/bin和/redis/ect 123$ mkdir //创建目录命令$ mv //剪切命令 需要剪切 Redis-3.2.9/redis.conf文件移动到/redis/ect目录$ mv //dump.rdb mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server移动到/redis/bin目录下 直接运行：Redis-server启动Redis服务，这样是在前台运行，修改为后台运行 编辑redis.conf文件，找到daemonize属性改为yes 再次重新启动redis服务 $ redis-service /usr/local/redis/etc/redis.conf //启动redis服务 配置允许远程连接：首先注意关闭linux防火墙 注释掉bind 127.0.0.1 设置Redis连接密码requirepass 123456 修改完保存，重启服务即可 java操作Redis下载 jedis-2.8.0.jar commons-pool2-2.4.2-bin.zip 简单连接方式： $ package com.redis.utils; $ $ import redis.clients.jedis.Jedis; $ $ public class RedisUtils { $ $ static String constr = "192.168.181.128" ; $ public static Jedis getRedis(){ $ Jedis jedis = new Jedis(constr,6379) ; $ jedis.auth("123456"); $ return jedis ; $ } $ $ public static void main(String[] args) { $ Jedis j = getRedis() ; $ String output ; $ j.set( "hello", "world" ) ; $ output = j.get( "hello") ; $ System. out.println(output) ; $ } $ $ }]]></content>
  </entry>
  <entry>
    <title><![CDATA[Cordova插件]]></title>
    <url>%2F2017%2F07%2F11%2FCordova%E6%8F%92%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[作为一个跑偏了的android程序猿,今天有幸能为移动端提供插件，心里很高兴。 创建插件创建插件目录123456789101112$ iromp$ |$ |-------src$ | |-----------android$ | |-----------ios$ |-------www$ | |-----------iromp.js$ |$ |-------plugin.xml$ |$ |-------README.md$ 编写plugin.xml文件12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152$ plugin : 定义命名空间，ID和插件版本$ name : 定义插件的名字$ description : 定义插件描述$ js-module : 定义js文件名，自动添加到Cordova项目的起始页。在*js-module*中列出插件。clobbers配置module.exports自动添加到window对象，让插件方法能够在窗口级别使用。$ platform : 定义移动端的配置信息 $ $ plugin.xml样例：$ $ &lt;?xml version='1.0' encoding='utf-8'?&gt;$ &lt;plugin xmlns="http://apache.org/cordova/ns/plugins/1.0"$ xmlns:rim="http://www.blackberry.com/ns/widgets"$ xmlns:android="http://schemas.android.com/apk/res/android"$ id="com.ronhe.iromp"$ version="0.0.1"&gt;$ $ &lt;name&gt;iromp&lt;/name&gt;$ &lt;description&gt;This is the plugin for RONHE IROMP&lt;/description&gt;$ &lt;js-module name="IrompPlugin" src="www/iromp.js"&gt;$ &lt;clobbers target="IrompPlugin" /&gt;$ &lt;/js-module&gt;$ $ &lt;platform name="android"&gt;$ &lt;config-file parent="/*" target="res/xml/config.xml"&gt;$ &lt;feature name="IrompPlugin"&gt;$ &lt;param name="android-package" value="com.ronhe.iromp.IrompPlugin" /&gt;$ &lt;/feature&gt;$ &lt;/config-file&gt;$ $ &lt;config-file target="AndroidManifest.xml" parent="/manifest"&gt;$ &lt;!-- put uses-permission here --&gt;$ &lt;/config-file&gt;$ $ &lt;config-file parent="/manifest/application" target="AndroidManifest.xml"&gt;$ &lt;service$ android:name="com.ronhe.iromp.IrompService"$ android:enabled="true"$ &gt;$ &lt;intent-filter android:priority="1000" &gt;$ &lt;action android:name="com.ronhe.iromp.IrompService"/&gt;$ &lt;/intent-filter&gt;$ &lt;/service&gt;$ &lt;/config-file&gt;$ &lt;source-file src="src/android/IrompPlugin.java" target-dir="src/com/ronhe/iromp" /&gt;$ &lt;source-file src="src/android/IrompService.java" target-dir="src/com/ronhe/iromp" /&gt;$ &lt;source-file src="src/android/SharedPrefsUtil.java" target-dir="src/com/ronhe/iromp" /&gt;$ &lt;source-file src="src/android/client.jar" target-dir="libs"/&gt;$ &lt;source-file src="src/android/log4j-1.2.17.jar" target-dir="libs"/&gt;$ &lt;source-file src="src/android/netty-all-4.1.12.Final.jar" target-dir="libs"/&gt;$ &lt;source-file src="src/android/protobuf-java-3.3.1.jar" target-dir="libs"/&gt;$ &lt;source-file src="src/android/slf4j-api-1.6.4.jar" target-dir="libs"/&gt;$ &lt;/platform&gt;$ &lt;/plugin&gt; 创建调用java的js文件12345678910$ $ require 用于引入java的类，exports 用于导出java类的方法$ exec五个参数：1：成功回调的函数。2：失败回调的函数。3：类名。4：可以用来区分调用那一段逻辑。5：js传递参数给java，传递格式：json$ $ js样例：$ $ var exec = require('cordova/exec');$ module.exports.startServiceOnSuccess=function(success, error, msg) &#123;$ exec(success, error, "IrompPlugin", "startServiceOnSuccess", [msg]);$ &#125;; 创建插件java调用类12345678910111213141516171819202122$ $ import org.apache.cordova.CallbackContext;$ import org.apache.cordova.CordovaPlugin;$ import android.util.Log;$ $ public class IrompPlugin extends CordovaPlugin &#123;$ $ @Override$ public boolean execute(String action, JSONArray args, CallbackContext callbackContext) throws JSONException &#123;$ try &#123;$ if(action.equals("startServiceOnSuccess"))&#123;$ Log.e("--------------&gt;","我的第一个插件");$ callbackContext.success("startServiceOnSuccess");$ return true;$ &#125;$ &#125; catch (Exception e) &#123;$ callbackContext.error(e.getMessage());$ return false;$ &#125;$ &#125;$ &#125;$ 插件安装命令123$ 1.ionic plugin list //列出所有已安装插件$ 2.ionic plugin remove 插件名 //先根据上面的list列出插件，然后根据插件名卸载$ 3.ionic plugin add 插件地址 //这个插件地址可以是github的项目地址，也可以是一个文件夹路径 下面共享一个我编写的安卓插件 插件主要功能： 调用安卓的服务，与socket服务通讯，里面包含socket服务端与客户端代码 下载地址： https://github.com/NiuLiuYang/NiuLiuYang/]]></content>
  </entry>
  <entry>
    <title><![CDATA[HEXO]]></title>
    <url>%2F2017%2F07%2F09%2FHEXO%2F</url>
    <content type="text"><![CDATA[Hexo+gitHub博客初体验Node和Git都安装好后,首先创建一个文件夹,如blog,用户存放hexo的配置文件,然后进入blog里安装Hexo。 执行如下命令安装Hexo：1$ sudo npm install -g hexo 初始化然后,执行init命令初始化hexo,命令：1$ hexo init 至此,全部安装工作已经完成！blog就是博客根目录,所有的操作都在里面进行。 生成静态页面1$ hexo generate（hexo g也可以） 本地启动启动本地服务,进行文章预览调试,命令： 1$ hexo server 浏览器输入http://localhost:4000 配置Github 建立Repository 建立关联命令,来：找到blog项目下的_config.yml文件 翻到最下面,改成我这样子的 1234567$ deploy:$ $ type: git$ $ repo: git@github.com:NiuLiuYang/NiuLiuYang.github.io.git$ $ branch: master 执行命令：1$ npm install hexo-deployer-git --save 网上会有很多说法，有的type是github, 还有repository最后面的后缀也不一样,是github.com.git,我现在的版本是hexo: 3.1.1,执行命令hexo -vsersion就出来了,3.0后全部改成上面这种格式了。 执行配置命令：1$ hexo deploy 更新内容或者增加文章步骤每次更新的步骤,可按以下三步来进行。12345$ hexo clean$ $ hexo generate$ $ hexo deploy 一些常用命令：12345678910111213$ hexo new"postName" #新建文章$ $ hexo new page"pageName" #新建页面$ $ hexo generate #生成静态页面至public目录$ $ hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）$ $ hexo deploy #将.deploy目录部署到GitHub$ $ hexo help # 查看帮助$ $ hexo version #查看Hexo的版本]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F07%2F09%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>